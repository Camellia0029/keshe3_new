#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

struct Point {
    double x;
    double y;

    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}
};

struct Triangle {
    Point p1;
    Point p2;
    Point p3;

    Triangle(const Point& p1, const Point& p2, const Point& p3) : p1(p1), p2(p2), p3(p3) {}
};

struct Edge {
    Point p1;
    Point p2;

    Edge(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}
};

// 辅助函数：计算两点之间的距离
double distance(const Point& p1, const Point& p2) {
    double dx = p2.x - p1.x;
    double dy = p2.y - p1.y;
    return std::sqrt(dx * dx + dy * dy);
}

// 辅助函数：判断点是否在三角形的外接圆内
bool pointInCircumcircle(const Point& point, const Triangle& triangle) {
    double ax = triangle.p1.x;
    double ay = triangle.p1.y;
    double bx = triangle.p2.x;
    double by = triangle.p2.y;
    double cx = triangle.p3.x;
    double cy = triangle.p3.y;
    double dx = point.x;
    double dy = point.y;

    double adx = ax - dx;
    double ady = ay - dy;
    double bdx = bx - dx;
    double bdy = by - dy;
    double cdx = cx - dx;
    double cdy = cy - dy;

    double ab = adx * bdy - bdx * ady;
    double bc = bdx * cdy - cdx * bdy;
    double ca = cdx * ady - adx * cdy;
    double abc = ab + bc + ca;

    double axSquared = ax * ax;
    double aySquared = ay * ay;
    double bxSquared = bx * bx;
    double bySquared = by * by;
    double cxSquared = cx * cx;
    double cySquared = cy * cy;

    double alift = axSquared + aySquared;
    double blift = bxSquared + bySquared;
    double clift = cxSquared + cySquared;

    double disc = alift * bc + blift * ca + clift * ab;

    return (abc > 0 && disc > 0);
}

// 辅助函数：创建超级三角形包含所有点集中的点
void createSuperTriangle(const std::vector<Point>& points, Triangle& superTriangle) {
    double minX = points[0].x;
    double minY = points[0].y;
    double maxX = minX;
    double maxY = minY;

    for (const auto& point : points) {
